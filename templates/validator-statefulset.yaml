{{- $root := . }}

{{- with .Values.validator }}
{{- if .enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $root.Release.Name }}-validator
  labels:
    {{- include "eth2-validator.labels" $root | nindent 4 }}
spec:
  # Notice: Cannot think of a good reason to run multiple instance of validator,
  #         there's no easy way to coordinate between instances for a hot standby backup
  #         at this moment, so it's better just fix this value here to avoid any future
  #         silly mistake
  replicas: 1
  serviceName: {{ $root.Release.Name }}-validator
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $root.Release.Name }}-validator
      app.kubernetes.io/instance: {{ $root.Release.Name }}
      app.kubernetes.io/component: validator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $root.Release.Name }}-validator
        app.kubernetes.io/instance: {{ $root.Release.Name }}
        app.kubernetes.io/component: validator
    spec:
    {{- with .imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "eth2-validator.validator.serviceAccountName" $root }}
      securityContext:
        {{- toYaml .podSecurityContext | nindent 8 }}
      initContainers:
        - name: copy-keystore
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          image: busybox
          command: ["/bin/sh", "-c"]
          # Copy keystore files based on what's described in the auto discovery feature doc
          # ref: https://lighthouse-book.sigmaprime.io/validator-management.html?highlight=--secrets-dir#populating-the-validator_definitionsyml-file
          args:
          - |
            set -e
            cd /var/data/keystores/
            echo "Importing keystores ..."
            for name in *.json; do
              echo "Importing ${name} ..."
              mkdir /var/data/validators/imported/${name}
              cp $name /var/data/validators/imported/${name}/voting-keystore.json
              echo "Imported ${name}"
            done
          volumeMounts:
          - name: keystores
            mountPath: /var/data/keystores
          - name: imported-keystores
            mountPath: /var/data/validators/imported
      containers:
        - name: validator
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          image: "{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ .image.pullPolicy }}
          args:
            {{- $beaconNodes := .beaconNodes | default (printf "http://%s-beacon:5052" $root.Release.Name) -}}
            {{- $feeRecipient := ( required ".validator.suggestedFeeRecipient is required" .suggestedFeeRecipient ) -}}
            {{- $args := concat .defaultArgs .extraArgs (list "--network" .network "--beacon-nodes" $beaconNodes "--suggested-fee-recipient" $feeRecipient) -}}
            {{- toYaml $args | nindent 12 }}
          ports:
            - name: http
              containerPort: 5052
              protocol: TCP
            - name: metrics
              containerPort: 5064
              protocol: TCP
          livenessProbe:
            {{- toYaml .livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .resources | nindent 12 }}
          volumeMounts:
          - name: data-{{ .network }}
            mountPath: /var/data
          - name: imported-keystores
            mountPath: /var/data/validators/imported
          - name: passwords
            mountPath: /var/data/secrets
            readOnly: true
      {{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
      - name: imported-keystores
        emptyDir: {}
      - name: keystores
        secret:
          secretName: {{ .keystoreSecretName }}
      - name: passwords
        secret:
          secretName: {{ .passwordSecretName }}
    {{- if not .persistent.enabled }}
      - name: data
        emptyDir: {}
    {{- end }}
 
  {{- if .persistent.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data-{{ .network }}
    spec:
      accessModes:
        {{- toYaml .persistent.accessModes | nindent 8 }}
      storageClassName: {{ .persistent.storageClassName }}
      resources:
        requests:
          storage: {{ .persistent.size }}
  {{- end }}

{{- end }}
{{- end }}
